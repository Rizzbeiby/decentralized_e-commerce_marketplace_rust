type Error = variant {
  Unauthorized: record { msg: text };
  NotFound: record { msg: text };
  InvalidInput: record { msg: text };
};

type Order = record {
  id: nat64;
  product_id: nat64;
  buyer_id: nat64;
  quantity: nat32;
  total_price: nat64;
  status: text;
  created_at: nat64;
  updated_at: opt nat64;
};

type OrderPayload = record {
  user_id: nat64;
  product_id: nat64;
  quantity: nat32;
  total_price: nat64;
};

type Product = record {
  id: nat64;
  name: text;
  description: text;
  price: nat64;
  stock_quantity: nat32;
  seller_id: nat64;
  created_at: nat64;
  updated_at: opt nat64;
};

type ProductPayload = record {
  name: text;
  description: text;
  price: nat64;
  stock_quantity: nat32;
  seller_id: nat64;
};

type User = record {
  id: nat64;
  name: text;
  email: text;
  role: text;
  reputation: nat8;
  created_at: nat64;
  updated_at: opt nat64;
};

type UserPayload = record {
  name: text;
  email: text;
  role: text;
};

service : {
  create_order: (OrderPayload) -> (Result<Order, Error>);
  create_product: (ProductPayload) -> (Result<Product, Error>);
  create_user: (UserPayload) -> (Result<User, Error>);
  delete_order: (nat64) -> (Result<Order, Error>);
  delete_product: (nat64) -> (Result<Product, Error>);
  delete_user: (nat64) -> (Result<User, Error>);
  update_order: (nat64, OrderPayload) -> (Result<Order, Error>);
  update_product: (nat64, ProductPayload) -> (Result<Product, Error>);
  update_user: (nat64, UserPayload) -> (Result<User, Error>);
  view_order: (nat64) -> (Result<Order, Error>);
  view_product: (nat64) -> (Result<Product, Error>);
  view_user: (nat64) -> (Result<User, Error>);
}
